/**
 * The contents of this file are subject to the CYPHON Proprietary Non-
 * Commercial Registered User Use License Agreement (the "Agreement”). You
 * may not use this file except in compliance with the Agreement, a copy
 * of which may be found at https://github.com/dunbarcyber/cyclops/. The
 * developer of the CYPHON technology and platform is Dunbar Security
 * Systems, Inc.
 *
 * The CYPHON technology or platform are distributed under the Agreement on
 * an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the Agreement for specific terms.
 *
 * Copyright (C) 2017 Dunbar Security Solutions, Inc. All Rights Reserved.
 *
 * Contributor/Change Made By: ________________. [Only apply if changes
 * are made]
 */

// Local
import { DistilleryMinimal } from '../distilleries/types';
import {
  NormalizedList,
  NormalizedEntity,
} from '../../types/normalizr';

/**
 * Monitor object returned from the cyphon API. Displays stores
 * associated with a running process or server that must be
 * monitored.
 */
export interface Monitor {
  /**
   * Name of the object.
   */
  name: string;
  /**
   * If the monitor is currently enabled.
   */
  enabled: boolean;
  /**
   * Interval that the monitor status is checked.
   */
  interval: string;
  /**
   * If this monitor has alerts enabled.
   */
  alerts_enabled: boolean;
  /**
   * Ther alert level that alerts generated by this monitor have.
   */
  alert_level: string;
  /**
   * Current status of the monitor.
   */
  status: string;
  /**
   * Date of the last time this monitor was active.
   */
  last_active: string;
  /**
   * Date of the last time this monitor status was updated.
   */
  last_updated: string;
  /**
   * Last time this monitor was healthy.
   */
  last_healthy: string;
  /**
   * ID of the last saved document this monitor stored.
   */
  last_saved_doc: number;
  /**
   * ID of the last doc this monitor interacted with.
   */
  last_doc: number;
  /**
   * Distilleries associated with this monitor.
   */
  distilleries: DistilleryMinimal[] | number[];
  /**
   * Last distillery this monitor interacted with.
   */
  last_active_distillery: DistilleryMinimal | number;
}

/**
 * Monitor with it's associated objects nested on the object.
 */
export interface MonitorNested extends Monitor {
  distilleries: DistilleryMinimal[];
  last_active_distillery: DistilleryMinimal;
}

export interface MonitorsByName {
  [name: string]: MonitorNested;
}

/**
 * Monitor with it's associated objects represented with their ID's.
 */
export interface MonitorFlat extends Monitor {
  distilleries: number[];
  last_active_distillery: number;
}

/**
 * Normalized shape of a monitor object.
 */
interface MonitorEntity {
  monitors: NormalizedEntity<MonitorFlat>;
  distilleries: NormalizedEntity<DistilleryMinimal>;
}

/**
 * Normalized list of monitor entitiyies.
 */
export type NormalizedMonitorList = NormalizedList<string, MonitorEntity>;
